// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($, window) {
    var Combo, setters;
    Combo = (function() {
      Combo.prototype.maxHeight = 300;

      Combo.prototype.pageSize = 10;

      Combo.prototype.expandOnFocus = false;

      Combo.prototype.selectOnTab = true;

      Combo.prototype.tabIndex = null;

      Combo.prototype.forceSelectionFromList = false;

      Combo.prototype.allowEmpty = true;

      Combo.prototype.keepListOpen = false;

      Combo.prototype.emptyListText = '(ingen valgmuligheder)';

      Combo.prototype.forceAllOnButtonClick = true;

      Combo.prototype.matchBy = 'inText';

      Combo.prototype.onlyShowEnabled = false;

      Combo.prototype.spellcheck = false;

      Combo.prototype.valueField = 'id';

      Combo.prototype.titleField = null;

      Combo.prototype.displayField = 'text';

      Combo.prototype.litraField = null;

      Combo.prototype.enabledField = true;

      Combo.prototype.modifiers = [];

      Combo.prototype.specifications = [];

      Combo.prototype.source = [];

      Combo.prototype.disabled = true;

      Combo.prototype.activeLi = null;

      Combo.prototype.isExpanded = false;

      Combo.prototype.key = {
        DOWN: 40,
        END: 35,
        ENTER: 13,
        ESCAPE: 27,
        HOME: 36,
        INSERT: 45,
        LEFT: 37,
        PAGE_DOWN: 34,
        PAGE_UP: 33,
        RIGHT: 39,
        SPACE: 32,
        TAB: 9,
        UP: 38,
        BACKSPACE: 8,
        DELETE: 46,
        NUMPAD_ENTER: 108
      };

      function Combo(wrapper, options) {
        var key, value;
        if (options == null) {
          options = {};
        }
        this.enable = __bind(this.enable, this);
        this.disable = __bind(this.disable, this);
        this.collapse = __bind(this.collapse, this);
        this.internalCollapse = __bind(this.internalCollapse, this);
        this.expand = __bind(this.expand, this);
        this.scrollIntoView = __bind(this.scrollIntoView, this);
        this.lastItemIsActive = __bind(this.lastItemIsActive, this);
        this.firstItemIsActive = __bind(this.firstItemIsActive, this);
        this.highlightValue = __bind(this.highlightValue, this);
        this.renderItem = __bind(this.renderItem, this);
        this.renderList = __bind(this.renderList, this);
        this.renderFullList = __bind(this.renderFullList, this);
        this.renderFilteredList = __bind(this.renderFilteredList, this);
        this.searchAndExpand = __bind(this.searchAndExpand, this);
        this.activateSelectedItem = __bind(this.activateSelectedItem, this);
        this.focus = __bind(this.focus, this);
        this.suppressNextBlur = __bind(this.suppressNextBlur, this);
        this.updateLastSelection = __bind(this.updateLastSelection, this);
        this.onBlur = __bind(this.onBlur, this);
        this.onFocus = __bind(this.onFocus, this);
        this.onMouseUp = __bind(this.onMouseUp, this);
        this.onKeyUp = __bind(this.onKeyUp, this);
        this.onKeyDown = __bind(this.onKeyDown, this);
        this.onButtonClick = __bind(this.onButtonClick, this);
        this.onListMouseDown = __bind(this.onListMouseDown, this);
        this.onListClick = __bind(this.onListClick, this);
        this.selectItem = __bind(this.selectItem, this);
        this.selectLi = __bind(this.selectLi, this);
        this.isEmpty = __bind(this.isEmpty, this);
        this.getRawValue = __bind(this.getRawValue, this);
        this.getValue = __bind(this.getValue, this);
        this.getSelectedItemAndIndex = __bind(this.getSelectedItemAndIndex, this);
        this.getSelectedIndex = __bind(this.getSelectedIndex, this);
        this.getSelectedItem = __bind(this.getSelectedItem, this);
        this.getSelectedValue = __bind(this.getSelectedValue, this);
        this.setValue = __bind(this.setValue, this);
        for (key in options) {
          if (!__hasProp.call(options, key)) continue;
          value = options[key];
          if (value != null) {
            this[key] = value;
          }
        }
        this.el = $(wrapper).addClass("combo-container").on('click', '.combo-list li', this.onListClick);
        this.input = $("<input type='text' class='combo-input' autocomplete='off' disabled='disabled' spellcheck='" + this.spellcheck + "' " + (this.tabIndex != null ? "tabindex='" + this.tabIndex + "'" : "") + " />").bind({
          keydown: this.onKeyDown,
          keyup: this.onKeyUp,
          mouseup: this.onMouseUp,
          focus: _.throttle(this.onFocus, 0),
          blur: this.onBlur
        }).appendTo(this.el);
        this.button = $('<button class="combo-button" tabindex="-1" disabled="disabled" />').bind({
          click: this.onButtonClick,
          mousedown: this.suppressNextBlur
        }).appendTo(this.el);
        this.list = $('<ul class="combo-list"/>').css({
          maxHeight: this.maxHeight
        }).bind({
          mousedown: this.onListMouseDown
        }).appendTo(this.el).hide();
        if ($.fn.bgiframe) {
          this.list.bgiframe();
        }
        if (this.source != null) {
          this.load(this.source);
        }
        this;
      }

      Combo.prototype.load = function(source) {
        var fixedItem, item, modifier, specification, title;
        this.source = (function() {
          var _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
          _results = [];
          for (_i = 0, _len = source.length; _i < _len; _i++) {
            item = source[_i];
            fixedItem = {
              litra: this.evaluate(this.litraField, item),
              value: this.evaluate(this.valueField, item),
              display: this.evaluate(this.displayField, item),
              title: this.stripMarkup((title = this.evaluate(this.titleField, item)) ? title : this.evaluate(this.displayField, item)),
              enabled: this.evaluate(this.enabledField, item)
            };
            _ref = this.modifiers;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              modifier = _ref[_j];
              fixedItem[modifier.field] = this.evaluate(modifier.field, item);
            }
            _ref1 = this.specifications;
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              specification = _ref1[_k];
              fixedItem[specification.field] = this.evaluate(specification.field, item);
            }
            _results.push(fixedItem);
          }
          return _results;
        }).call(this);
        this.enable();
        this.ensureSelection();
        this.lastQuery = this.input.val();
        return this.input.trigger('loaded');
      };

      Combo.prototype.setValue = function(value) {
        var item, _i, _len, _ref;
        _ref = this.source;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (!(item.value === value)) {
            continue;
          }
          this.selectItem(item, {
            forced: true
          });
          return;
        }
        return this.input.val(value);
      };

      Combo.prototype.getSelectedValue = function() {
        var item, _ref;
        item = (_ref = this.getSelectedItemAndIndex()) != null ? _ref.item : void 0;
        if (item != null) {
          return item.value;
        } else {
          return null;
        }
      };

      Combo.prototype.getSelectedItem = function() {
        var _ref;
        return (_ref = this.getSelectedItemAndIndex()) != null ? _ref.item : void 0;
      };

      Combo.prototype.getSelectedIndex = function() {
        var _ref;
        return (_ref = this.getSelectedItemAndIndex()) != null ? _ref.index : void 0;
      };

      Combo.prototype.getSelectedItemAndIndex = function() {
        var index, item, _i, _len, _ref;
        _ref = this.source;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          item = _ref[index];
          if (item.title === this.input.val()) {
            return {
              item: item,
              index: index
            };
          }
        }
      };

      Combo.prototype.hasSelection = function() {
        return this.getSelectedItemAndIndex() != null;
      };

      Combo.prototype.getValue = function() {
        var _ref;
        return (_ref = this.getSelectedValue()) != null ? _ref : this.getRawValue();
      };

      Combo.prototype.getRawValue = function() {
        return this.input.val();
      };

      Combo.prototype.isEmpty = function() {
        return this.input.val() === '' || this.input.val() === null;
      };

      Combo.prototype.selectLi = function(li) {
        this.selectItem(this.source[$(li).data('combo-id')]);
        return this.refocus();
      };

      Combo.prototype.selectItem = function(item, options) {
        if (options == null) {
          options = {};
        }
        if (!item.enabled && !options.forced) {
          return;
        }
        this.input.val(item.title);
        this.lastQuery = this.input.val();
        this.updateLastSelection();
        this.internalCollapse();
        return _.delay(((function(_this) {
          return function() {
            return _this.input.trigger('itemSelect', {
              title: item.title
            });
          };
        })(this)), 10);
      };

      Combo.prototype.onListClick = function(event) {
        return this.selectLi(event.currentTarget);
      };

      Combo.prototype.onListMouseDown = function(event) {
        this.suppressNextBlur();
        if (!$(event.target).closest('ul.combo-list li').length) {
          return this.refocus();
        }
      };

      Combo.prototype.onButtonClick = function(event) {
        if (this.disabled) {
          return;
        }
        if (this.isExpanded && $('li', this.list).length) {
          this.internalCollapse();
        } else {
          this.searchAndExpand({
            forceAll: this.forceAllOnButtonClick
          });
        }
        return this.focus();
      };

      Combo.prototype.onKeyDown = function(event) {
        if (this.disabled) {
          return;
        }
        if (this.isExpanded) {
          switch (event.keyCode) {
            case this.key.HOME:
              return this.moveHome() && event.preventDefault();
            case this.key.END:
              return this.moveEnd() && event.preventDefault();
            case this.key.PAGE_UP:
              this.movePreviousPage();
              return event.preventDefault();
            case this.key.PAGE_DOWN:
              this.moveNextPage();
              return event.preventDefault();
            case this.key.UP:
              this.movePrevious();
              return event.preventDefault();
            case this.key.DOWN:
              this.moveNext();
              return event.preventDefault();
            case this.key.ENTER:
            case this.key.NUMPAD_ENTER:
              this.input.one('keypress', (function(_this) {
                return function(keypress) {
                  return keypress.preventDefault();
                };
              })(this));
              if (this.activeLi) {
                this.selectLi(this.activeLi);
              }
              event.preventDefault();
              return event.stopPropagation();
            case this.key.TAB:
              if (this.activeLi && this.selectOnTab) {
                this.selectLi(this.activeLi);
              }
              if (this.source.length) {
                event.preventDefault();
                return event.stopPropagation();
              }
              break;
            case this.key.ESCAPE:
              return this.internalCollapse();
          }
        } else {
          switch (event.keyCode) {
            case this.key.PAGE_UP:
            case this.key.PAGE_DOWN:
            case this.key.UP:
            case this.key.DOWN:
              this.searchAndExpand();
              return event.preventDefault();
            case this.key.ENTER:
              this.input.trigger('enterpress');
              return event.preventDefault();
            case this.key.ESCAPE:
              return this.input.select();
          }
        }
      };

      Combo.prototype.onKeyUp = function(event) {
        if (this.disabled) {
          return;
        }
        this.updateLastSelection();
        if (this.lastQuery === this.input.val()) {
          return;
        }
        switch (event.keyCode) {
          case this.key.BACKSPACE:
          case this.key.DELETE:
          case this.key.ENTER:
            if (!this.isExpanded) {
              return;
            }
        }
        return this.searchAndExpand();
      };

      Combo.prototype.onMouseUp = function() {
        if (this.disabled) {
          return;
        }
        return this.updateLastSelection();
      };

      Combo.prototype.onFocus = function(event, data) {
        clearTimeout(this.closing);
        if (this.disabled) {
          return;
        }
        if (!(data != null ? data.forcedFocus : void 0)) {
          this.input.trigger('enter');
          if (this.expandOnFocus) {
            this.searchAndExpand();
          }
          return _.defer((function(_this) {
            return function() {
              return _this.input.select();
            };
          })(this));
        }
      };

      Combo.prototype.onBlur = function(event) {
        if (this.disabled || this.blurIsSuppressed) {
          this.blurIsSuppressed = false;
          return;
        }
        this.ensureSelection();
        this.internalCollapse();
        return this.input.trigger('leave');
      };

      Combo.prototype.ensureSelection = function() {
        if (this.disabled || !this.forceSelectionFromList || this.hasSelection()) {
          return;
        }
        if ((this.lastSelection != null) && (!this.isEmpty() || (this.isEmpty() && !this.allowEmpty))) {
          return this.selectItem(this.lastSelection.item);
        } else {
          if (!this.allowEmpty) {
            if (this.source.length) {
              return this.selectItem(this.source[0]);
            }
          } else {
            this.input.val('');
            return this.lastSelection = null;
          }
        }
      };

      Combo.prototype.updateLastSelection = function() {
        var currentSelection;
        if (!this.forceSelectionFromList) {
          return;
        }
        currentSelection = this.getSelectedItemAndIndex();
        if (currentSelection != null) {
          return this.lastSelection = currentSelection;
        }
      };

      Combo.prototype.suppressNextBlur = function() {
        if (this.input.is(':focus')) {
          return this.blurIsSuppressed = true;
        }
      };

      Combo.prototype.refocus = function() {
        return _.delay(((function(_this) {
          return function() {
            if (!_this.input.is(':focus')) {
              return _this.input.trigger('focus', {
                forcedFocus: true
              });
            }
          };
        })(this)), 1);
      };

      Combo.prototype.focus = function() {
        return _.delay(((function(_this) {
          return function() {
            if (!_this.input.is(':focus')) {
              return _this.input.trigger('focus');
            }
          };
        })(this)), 1);
      };

      Combo.prototype.activateSelectedItem = function() {
        var index, li, _i, _len, _ref, _results;
        index = this.getSelectedIndex();
        if (index == null) {
          return;
        }
        _ref = this.list.children();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          li = _ref[_i];
          if (!($(li).data('combo-id') === index)) {
            continue;
          }
          this.activate($(li));
          _results.push($(li).addClass('selected'));
        }
        return _results;
      };

      Combo.prototype.stripMarkup = function(text) {
        return text != null ? text.replace(/<br[^>]*>/g, " | ").replace(/<(?:.|\s)*?>/g, '').replace(/[\n\r]/g, '') : void 0;
      };

      Combo.prototype.searchAndExpand = function(options) {
        if (options == null) {
          options = {};
        }
        this.lastQuery = this.input.val();
        if (this.hasSelection() || options.forceAll) {
          this.renderFullList();
          this.activateSelectedItem();
          this.expand(options);
          return;
        }
        this.renderFilteredList();
        this.activate($('li:first', this.list));
        return this.expand();
      };

      Combo.prototype.buildFilters = function(queryString) {
        var currentWord, dontSearchInsideTags, filters, first, firstChar, modifier, queryStringSplit, specFinder, specification, specsInQuery, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        filters = [];
        queryString = queryString.replace(/([.*+?^${}()|[\]\/\\])/g, "\\$1");
        queryString = queryString.replace(/([<>])/g, "");
        firstChar = queryString.substr(0, 1);
        _ref = this.modifiers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          modifier = _ref[_i];
          if (firstChar === modifier.modifier) {
            filters.push({
              property: modifier.field,
              predicate: function(value) {
                return value;
              }
            });
            queryString = queryString.substr(1);
          }
        }
        _ref1 = this.specifications;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          specification = _ref1[_j];
          specFinder = new RegExp(specification.alias + ":\\s*(\\w+)");
          specsInQuery = specFinder.exec(queryString);
          if (specsInQuery) {
            filters.push({
              property: specification.field,
              predicate: function(value) {
                return value === specsInQuery[1];
              }
            });
            queryString = queryString.replace(specFinder, "");
          }
        }
        queryStringSplit = queryString.split(" ");
        if (((this.litraField != null) != null) && queryString.match(/^[#,]\w[\w\\\.,]*(\s|$)/)) {
          first = queryStringSplit.shift();
          filters.push({
            property: 'litra',
            regex: new RegExp("^()(" + first.substr(1).replace(/,/g, "\\.") + ")", "i"),
            predicate: function(value) {
              return this.regex.test(value);
            }
          });
        }
        for (_k = 0, _len2 = queryStringSplit.length; _k < _len2; _k++) {
          currentWord = queryStringSplit[_k];
          if (!(currentWord !== "")) {
            continue;
          }
          currentWord = currentWord.replace(/\\\*/g, "[\\wæøåÆØÅ]*");
          currentWord = currentWord.replace(/\\\+/g, " ");
          dontSearchInsideTags = "(?![^><\\[\\]]*(>|\\]))";
          switch (this.matchBy) {
            case "none":
              break;
            case "inText":
              filters.push({
                property: 'display',
                regex: new RegExp("()(" + currentWord + ")()" + dontSearchInsideTags, "i"),
                predicate: function(value) {
                  return this.regex.test(value);
                }
              });
              break;
            case "firstInText":
              filters.push({
                property: 'display',
                regex: new RegExp("^()(" + currentWord + ")()" + dontSearchInsideTags, "i"),
                predicate: function(value) {
                  return this.regex.test(value);
                }
              });
              break;
            case "firstInWord":
              filters.push({
                property: 'display',
                regex: new RegExp("(^|[^\\wæøåÆØÅ\\[\\]])(" + currentWord + ")()" + dontSearchInsideTags, "i"),
                predicate: function(value) {
                  return this.regex.test(value);
                }
              });
              break;
            case "wholeWord":
              filters.push({
                property: 'display',
                regex: new RegExp("(^|[^\\wæøåÆØÅ\\[\\]])(" + currentWord + ")($|[^\\wæøåÆØÅ\\[\\]])", "i"),
                predicate: function(value) {
                  return this.regex.test(value);
                }
              });
              break;
            default:
              throw new Error("matchBy not set to a valid value");
          }
        }
        return filters;
      };

      Combo.prototype.positionList = function() {
        return this.list.css({
          zIndex: this.el.css('zIndex') + 1
        });
      };

      Combo.prototype.renderFilteredList = function() {
        var filters;
        filters = this.input.val() === '' ? [] : this.buildFilters(this.input.val());
        return this.renderList(this.source, filters);
      };

      Combo.prototype.renderFullList = function() {
        return this.renderList(this.source, []);
      };

      Combo.prototype.renderList = function(items, filters) {
        var htmls, index, item;
        htmls = (function() {
          var _i, _len, _results;
          _results = [];
          for (index = _i = 0, _len = items.length; _i < _len; index = ++_i) {
            item = items[index];
            if (!this.onlyShowEnabled || item.enabled) {
              _results.push(this.renderItem(item, index, filters));
            }
          }
          return _results;
        }).call(this);
        if (htmls.length) {
          return this.list[0].innerHTML = htmls.join('');
        } else {
          return this.list[0].innerHTML = "<li class='disabled'>" + this.emptyListText + "</li>";
        }
      };

      Combo.prototype.renderItem = function(item, index, filters) {
        var classes, filter, litra, text, _i, _len;
        for (_i = 0, _len = filters.length; _i < _len; _i++) {
          filter = filters[_i];
          if (!filter.predicate(item[filter.property])) {
            return;
          }
        }
        if ((this.litraField != null) && ((litra = item.litra) != null)) {
          text = "[" + litra + "] " + (this.highlightValue(item, 'display', filters));
        } else {
          text = this.highlightValue(item, 'display', filters);
        }
        classes = [this.onlyShowEnabled || item.enabled ? 'enabled' : 'disabled'];
        return "<li data-combo-id=\"" + index + "\" class=\"" + (classes.join(' ')) + "\">" + text + "</li>";
      };

      Combo.prototype.highlightValue = function(item, property, filters) {
        var filter, value, _i, _len;
        value = item[property];
        if (value == null) {
          return null;
        }
        for (_i = 0, _len = filters.length; _i < _len; _i++) {
          filter = filters[_i];
          if (filter.property === property && (filter.regex != null)) {
            value = value.replace(filter.regex, "<b>$2</b>");
          }
        }
        return value;
      };

      Combo.prototype.moveNext = function() {
        if (this.activeLi) {
          if (!this.lastItemIsActive()) {
            return this.activate(this.activeLi.next());
          }
        } else {
          return this.moveHome();
        }
      };

      Combo.prototype.movePrevious = function() {
        if (this.activeLi) {
          if (!this.firstItemIsActive()) {
            return this.activate(this.activeLi.prev());
          }
        } else {
          return this.moveEnd();
        }
      };

      Combo.prototype.moveNextPage = function() {
        var rest;
        if (!this.activeLi) {
          this.moveHome();
        }
        rest = this.activeLi.nextAll();
        if (rest.length >= this.pageSize) {
          return this.activate(rest.eq(this.pageSize - 1));
        } else {
          return this.moveEnd();
        }
      };

      Combo.prototype.movePreviousPage = function() {
        var rest;
        if (!this.activeLi) {
          this.activate($('li:last', this.list));
        }
        rest = this.activeLi.prevAll();
        if (rest.length >= this.pageSize) {
          return this.activate(rest.eq(this.pageSize - 1));
        } else {
          return this.moveHome();
        }
      };

      Combo.prototype.moveHome = function() {
        return this.activate($('li:first', this.list));
      };

      Combo.prototype.moveEnd = function() {
        return this.activate($('li:last', this.list));
      };

      Combo.prototype.activate = function(item) {
        var _ref;
        if ((_ref = this.activeLi) != null) {
          _ref.removeClass('active');
        }
        if ((item != null) && item.length) {
          item.addClass('active');
          this.activeLi = item;
          this.scrollIntoView();
        } else {
          this.activeLi = null;
        }
        return this.activeLi;
      };

      Combo.prototype.firstItemIsActive = function() {
        var _ref;
        return ((_ref = this.activeLi) != null ? _ref[0] : void 0) === $("li:first", this.list)[0];
      };

      Combo.prototype.lastItemIsActive = function() {
        var _ref;
        return ((_ref = this.activeLi) != null ? _ref[0] : void 0) === $('li:last', this.list)[0];
      };

      Combo.prototype.scrollIntoView = function() {
        var currentScroll, hasScroll, itemHeight, itemOffset, listHeight, listTopBorder, listTopPadding, scroll;
        if (!(this.isExpanded && this.activeLi)) {
          return;
        }
        if (this.firstItemIsActive()) {
          if (this.list[0].scrollTop > 0) {
            this.list.scrollTop(0);
          }
          return;
        }
        hasScroll = this.list.prop('scrollHeight') > this.maxHeight;
        if (hasScroll) {
          listTopBorder = parseFloat($.css(this.list[0], 'borderTopWidth')) || 0;
          listTopPadding = parseFloat($.css(this.list[0], 'paddingTop')) || 0;
          itemOffset = this.activeLi.offset().top - this.list.offset().top - listTopBorder - listTopPadding;
          listHeight = this.maxHeight;
          currentScroll = this.list.scrollTop();
          itemHeight = this.activeLi.outerHeight();
          scroll = itemOffset < 0 ? currentScroll + itemOffset : itemOffset + itemHeight > listHeight ? currentScroll + itemOffset - listHeight + itemHeight : void 0;
          return this.list.scrollTop(scroll);
        }
      };

      Combo.prototype.expand = function(options) {
        if (options == null) {
          options = {};
        }
        if (this.disabled) {
          return;
        }
        if (this.isExpanded) {
          return;
        }
        this.el.addClass('expanded');
        this.isExpanded = true;
        this.list.show().slideDown(60, options.callback);
        this.positionList();
        return this.scrollIntoView();
      };

      Combo.prototype.internalCollapse = function() {
        if (this.keepListOpen) {
          return this.searchAndExpand();
        } else {
          return this.collapse();
        }
      };

      Combo.prototype.collapse = function(options) {
        if (options == null) {
          options = {};
        }
        this.el.removeClass('expanded');
        this.isExpanded = false;
        return this.list.slideUp(60, options.callback);
      };

      Combo.prototype.disable = function() {
        this.disabled = true;
        this.input.attr({
          disabled: true
        });
        return this.button.attr({
          disabled: true
        });
      };

      Combo.prototype.enable = function() {
        this.disabled = false;
        this.input.attr({
          disabled: false
        });
        return this.button.attr({
          disabled: false
        });
      };

      Combo.prototype.evaluate = function(fieldGetter, item) {
        if (fieldGetter == null) {
          return null;
        } else if (_.isFunction(fieldGetter)) {
          return fieldGetter(item);
        } else if (_.isFunction(item[fieldGetter])) {
          return item[fieldGetter]();
        } else {
          return item[fieldGetter];
        }
      };

      return Combo;

    })();
    setters = ["load", "renderFullList"];
    return $.fn.extend({
      combo: function() {
        var args, option, value;
        option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        value = this;
        this.each(function() {
          var $this, data, plugin, _value;
          $this = $(this);
          plugin = $this.data('combo');
          if (!plugin) {
            return $this.data('combo', (data = new Combo(this, option)));
          } else if (typeof option === 'string') {
            if (!option in plugin) {
              throw new Error("Unknown combo method " + option);
            }
            _value = plugin[option].apply(plugin, args);
            if (!(__indexOf.call(setters, option) >= 0)) {
              return value = _value;
            }
          }
        });
        return value;
      }
    });
  })(window.jQuery, window);

}).call(this);
